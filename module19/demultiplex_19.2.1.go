package main

import (
	"fmt"
	"sync"
)

// Число сообщений от одной горутины(источника).
const amountMessagesPerGoroutine int = 5

// DemultiplexingFunc2 - функция разуплотнения каналов. На вход подается канал с данными в качестве источника
// и количество элементов в слайсе, т.е. количество сообщений в одной горутине. Функция возвращает слайл из
// каналов и вспомогательный канал done.
// Done необходим для оповещения горутин о событии - сообщения из источника разосланы по каналам и их можно закрывать.
func demultiplexingFunc2(dataSourceChan chan int, amount int) ([]chan int, <-chan int) {
	//Команда инициализирует слайс, но не инициализирует каждый его элемент.  Каждый элемент будет иметь нулевое
	//значение - nil, т.к. канал - ссылочный тип.
	var output = make([]chan int, amount)
	var done = make(chan int)

	//Инициализация канала в каждом элементе слайса.
	for i := range output {
		output[i] = make(chan int)
	}

	//Горутина в которой происходит разуплотнение каналов. Из одного канала сообщение рассылается в множество.
	go func() {
		//Создание WaitGroup для ожидания окончания работы горутины
		var wg sync.WaitGroup
		//Установка счётчика WaitGroup.
		wg.Add(1)

		//В горутине два цикла, внешний для приёма сообщений из источника, внутренний для записи в него сообщений.
		go func() {
			defer wg.Done()

			// При поступлении сообщения в канал-источник, он отправляется в каждый из каналов-потребителей
			for v := range dataSourceChan {
				for _, c := range output {
					c <- v
				}
			}
		}()
		wg.Wait()

		// После завершения посылки сообщений в основной канал-источник данных, вспомогательный
		//канал закрывается.
		close(done)

	}()
	return output, done
}

// MultiplexingFunc2 - функция уплотнения каналов. Введена условно, для облегчения перебора каналов
// после демультиплексирования. На вход, в качестве аргументов, подаётся вспомогательный канал для закрытия
// каналов-приёмников, и произвольное количество каналов источников. На выход выводится общий централизованный канал.
func multiplexingFunc2(done <-chan int, channels ...chan int) <-chan int {

	//Создание WaitGroup для ожидания окончания работы горутины.
	var wg sync.WaitGroup

	// Инициализация общего канала, в который будут попадать сообщения от всех источников. Именно этот канал будет
	//возвращен для употребления внешним кодом.
	multiplexedChan := make(chan int)
	multiplex := func(c <-chan int) {
		defer wg.Done()
		//Проверка в бесконечном цикле каналов.
		for {
			//Сработает тот case в который раньше всего придёт сообщение.
			select {
			//Если сообщение поступает из источника, оно записывается в централизованный канал.
			case i := <-c:
				multiplexedChan <- i
				// Если пришло сообщение, что вспомогательный канал done закрылся то, необходимо закрыть каналы
				//принимающие сообщения из источника в функции demultiplexingFunc2.
			case <-done:
				return
			}
		}
	}

	wg.Add(len(channels))

	//Чтение каждого источника в своей горутине.
	for _, c := range channels {
		go multiplex(c)
	}
	// Запуск горутины, которая закроет канал после того, как в закрывающий канал поступит сигнал о
	//прекращении работы всех
	go func() {
		wg.Wait()
		close(multiplexedChan)
	}()
	return multiplexedChan
}

func main() {

	// Горутина — источник данных. Функция создаёт свой собственный канал и посылает в него пять сообщений
	startDataSource := func() chan int {
		c := make(chan int)
		go func() {
			var wg sync.WaitGroup
			wg.Add(1)
			go func() {
				defer wg.Done()
				for i := 1; i <= amountMessagesPerGoroutine; i++ {
					c <- i
				}
			}()
			wg.Wait()
			close(c)
		}()
		return c
	}

	// Запуск разуплотнения данных. В качестве источника отправляется результат функции startDataSource.
	consumers, done := demultiplexingFunc2(startDataSource(), 5)

	c := multiplexingFunc2(done, consumers...)

	// Централизованно получаем сообщения от всех нужных нам источников данных
	for data := range c {
		fmt.Println(data)
	}
}
